{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport _defineProperty from \"/Users/wuyanqiang/Documents/h5/zqplayer-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport _objectWithoutProperties from \"/Users/wuyanqiang/Documents/h5/zqplayer-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"/Users/wuyanqiang/Documents/h5/zqplayer-admin/src/components/tables/EditableTable.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Created by hao.cheng on 2017/4/16.\n */\nimport React from 'react';\nconst data = [];\n\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: \"Edrward \".concat(i),\n    age: 32,\n    address: \"London Park no. \".concat(i)\n  });\n}\n\nconst FormItem = _Form.Item;\nconst EditableContext = React.createContext({});\n\nconst EditableRow = (_ref) => {\n  let form = _ref.form,\n      index = _ref.index,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return React.createElement(EditableContext.Provider, {\n    value: form,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"tr\", Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })));\n};\n\nconst EditableFormRow = _Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return React.createElement(_InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(_Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          editing = _this$props.editing,\n          dataIndex = _this$props.dataIndex,\n          title = _this$props.title,\n          inputType = _this$props.inputType,\n          record = _this$props.record,\n          index = _this$props.index,\n          restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\"]);\n\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, form => {\n      const getFieldDecorator = form.getFieldDecorator;\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), editing ? React.createElement(FormItem, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : restProps.children);\n    });\n  }\n\n}\n\nexport default class EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = void 0;\n\n    this.isEditing = record => {\n      return record.key === this.state.editingKey;\n    };\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.state = {\n      data,\n      editingKey: ''\n    };\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const editable = this.isEditing(record);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, editable ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(EditableContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, form => React.createElement(_Button, {\n          onClick: () => this.save(form, record.key),\n          style: {\n            marginRight: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Save\")), React.createElement(_Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: () => this.cancel(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(_Button, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Cancel\"))) : React.createElement(_Button, {\n          onClick: () => this.edit(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"Edit\"));\n      }\n    }];\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread({}, item, {}, row));\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(data);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return React.createElement(_Table, {\n      components: components,\n      bordered: true,\n      dataSource: this.state.data,\n      columns: columns,\n      rowClassName: (record, index) => 'editable-row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/wuyanqiang/Documents/h5/zqplayer-admin/src/components/tables/EditableTable.tsx"],"names":["React","data","i","push","key","toString","name","age","address","FormItem","Item","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","Component","getInput","inputType","render","editing","dataIndex","title","record","restProps","getFieldDecorator","margin","rules","required","message","initialValue","children","EditableTable","constructor","columns","isEditing","state","editingKey","cancel","setState","width","editable","text","save","marginRight","edit","validateFields","error","row","newData","findIndex","item","splice","components","body","cell","map","col","onCell"],"mappings":"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","sourcesContent":["/**\n * Created by hao.cheng on 2017/4/16.\n */\n\nimport React from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from 'antd';\n\nconst data: any[] = [];\nfor (let i = 0; i < 100; i++) {\n    data.push({\n        key: i.toString(),\n        name: `Edrward ${i}`,\n        age: 32,\n        address: `London Park no. ${i}`,\n    });\n}\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext({});\n\ntype EditableRowProps = {\n    form: any;\n    index: any;\n};\nconst EditableRow = ({ form, index, ...props }: EditableRowProps) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\ntype EditableCellProps = {\n    inputType: string;\n    editing: boolean;\n    dataIndex: number;\n    title: string;\n    record: any;\n    index: number;\n};\nclass EditableCell extends React.Component<EditableCellProps> {\n    getInput = () => {\n        if (this.props.inputType === 'number') {\n            return <InputNumber />;\n        }\n        return <Input />;\n    };\n    render() {\n        const { editing, dataIndex, title, inputType, record, index, ...restProps } = this.props;\n        return (\n            <EditableContext.Consumer>\n                {(form: any) => {\n                    const { getFieldDecorator } = form;\n                    return (\n                        <td {...restProps}>\n                            {editing ? (\n                                <FormItem style={{ margin: 0 }}>\n                                    {getFieldDecorator(dataIndex, {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: `Please Input ${title}!`,\n                                            },\n                                        ],\n                                        initialValue: record[dataIndex],\n                                    })(this.getInput())}\n                                </FormItem>\n                            ) : (\n                                restProps.children\n                            )}\n                        </td>\n                    );\n                }}\n            </EditableContext.Consumer>\n        );\n    }\n}\n\ntype EditableTableProps = {};\ntype EditableTableState = {\n    data: any;\n    editingKey: string;\n};\nexport default class EditableTable extends React.Component<EditableTableProps, EditableTableState> {\n    constructor(props: any) {\n        super(props);\n        this.state = { data, editingKey: '' };\n        this.columns = [\n            {\n                title: 'name',\n                dataIndex: 'name',\n                width: '25%',\n                editable: true,\n            },\n            {\n                title: 'age',\n                dataIndex: 'age',\n                width: '15%',\n                editable: true,\n            },\n            {\n                title: 'address',\n                dataIndex: 'address',\n                width: '40%',\n                editable: true,\n            },\n            {\n                title: 'operation',\n                dataIndex: 'operation',\n                render: (text: any, record: any) => {\n                    const editable = this.isEditing(record);\n                    return (\n                        <div>\n                            {editable ? (\n                                <span>\n                                    <EditableContext.Consumer>\n                                        {(form: any) => (\n                                            <Button\n                                                onClick={() => this.save(form, record.key)}\n                                                style={{ marginRight: 8 }}\n                                            >\n                                                Save\n                                            </Button>\n                                        )}\n                                    </EditableContext.Consumer>\n                                    <Popconfirm\n                                        title=\"Sure to cancel?\"\n                                        onConfirm={() => this.cancel()}\n                                    >\n                                        <Button>Cancel</Button>\n                                    </Popconfirm>\n                                </span>\n                            ) : (\n                                <Button onClick={() => this.edit(record.key)}>Edit</Button>\n                            )}\n                        </div>\n                    );\n                },\n            },\n        ];\n    }\n    columns: any[];\n    isEditing = (record: any) => {\n        return record.key === this.state.editingKey;\n    };\n    edit(key: string) {\n        this.setState({ editingKey: key });\n    }\n    save(form: any, key: string) {\n        form.validateFields((error: any, row: any) => {\n            if (error) {\n                return;\n            }\n            const newData = [...this.state.data];\n            const index = newData.findIndex(item => key === item.key);\n            if (index > -1) {\n                const item = newData[index];\n                newData.splice(index, 1, {\n                    ...item,\n                    ...row,\n                });\n                this.setState({ data: newData, editingKey: '' });\n            } else {\n                newData.push(data);\n                this.setState({ data: newData, editingKey: '' });\n            }\n        });\n    }\n    cancel = () => {\n        this.setState({ editingKey: '' });\n    };\n    render() {\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: (record: any) => ({\n                    record,\n                    inputType: col.dataIndex === 'age' ? 'number' : 'text',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record),\n                }),\n            };\n        });\n\n        return (\n            <Table\n                components={components}\n                bordered\n                dataSource={this.state.data}\n                columns={columns}\n                rowClassName={(record: any, index: number) => 'editable-row'}\n            />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}